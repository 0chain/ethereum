import React, { Component } from 'react';
import { Row, Col, Button } from 'reactstrap';
import zbox from '../../images/stats/zbox.png';
import no_of_txs from '../../images/stats/no_of_txs.png';
import eth from '../../images/stats/eth.png';
import MetricBox from '../../components/transactions/MetricBox';

// importing ethereum dependencies
import web3 from '../../web3';
import dts from '../../dStorage';

// 0chain dStorage Metadata generated by the client
import { ZBOX_METADATA } from '../../config';
import zbox_config from '../../zbox/zbox_config.json'

// 0chain commit metadata - importing JS Client SDK
import config from '../../0chain/cluster'
import jsClientSdk from '0chain';

// Init SDK
const bls = window.bls
  bls.init().then(()=>{
    console.log('ok')
    const sec = new bls.SecretKey()
    sec.setByCSPRNG()
    sec.dump()
  })

jsClientSdk.init(config, bls) 


class TransactionStats extends Component { 

  state = {
    documentHash: ZBOX_METADATA.documentHash,
    authTicket: ZBOX_METADATA.authTicket,
    lookupHash: ZBOX_METADATA.lookupHash,
    ethAddress: '',
    blockNumber: '',
    transactionHash: '',
    gasUsed: '',
    txReceipt: '',
    allocationId: zbox_config["0chain"].allocationId,
    remotePath: zbox_config["0chain"].remotepath,
    walletInfo: zbox_config["0chain"].walletInfo
  };
  
  uploadMetadataToZbox = async () => {
    try {
      await jsClientSdk.commitMetaTransaction(this.state.walletInfo, "Upload", 
      this.state.allocationId, this.state.remotePath);
    } 
    catch (error) {
      console.log(error)
    }
  };
  
  onClick = async () => {
    try {
      this.setState({ blockNumber: "Loading" });
      this.setState({ gasUsed: "Loading" });
  
      await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt) => {
        console.log(err, txReceipt);
        this.setState({ txReceipt });
      });
  
      await this.setState({ blockNumber: this.state.txReceipt.blockNumber });
      await this.setState({ gasUsed: this.state.txReceipt.gasUsed });
    }
  
    catch (error) {
      console.log(error);
    }
  }
  
  onPress = async (event) => {
    event.preventDefault();
    const accounts = await web3.eth.getAccounts();
  
    console.log('Sending from ethereum account: ' + accounts[0]);
  
    const ethAddress = await dts.options.address;
    this.setState({ ethAddress });
  
    await dts.methods.uploadMetadata(this.state.documentHash, this.state.authTicket, this.state.lookupHash).send({
      from: accounts[0]
    }, (error, transactionHash) => {
      console.log(transactionHash);
      this.setState({ transactionHash });
    });
  };
  
    render() {
      return (
        <div>
          <Row>
            <Col md="4">
              <MetricBox
                metric={'Upload File to 0Chain'}
                value={''}
                icon={zbox}
              />
              <br/>
              <Button>Upload</Button>
            </Col>
            <Col md="4">
              <MetricBox
                metric={'Commit Metadata to Ethereum'}
                value={''}
                icon={eth}
              />
              <br/>
              <Button onClick={this.onPress}>Commit</Button>
            </Col>
            <Col md="4">
              <MetricBox
                metric={'Transaction Details'}
                value={''}
                icon={no_of_txs}
              />
              <br/>
              <Button onClick={this.onClick}>Transaction Details</Button>
            </Col>
          </Row>
        </div>
      );
    }
  }

  export default TransactionStats;  